// <auto-generated />
using System;
using Juice.Audit.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Juice.Audit.EF.PostgreSQL.Migrations
{
    [DbContext(typeof(AuditDbContext))]
    [Migration("20230914023536_InitAuditLog")]
    partial class InitAuditLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Juice.Audit.Domain.AccessLogAggregate.AccessLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("User", "Action");

                    b.ToTable("AccessLog", (string)null);
                });

            modelBuilder.Entity("Juice.Audit.Domain.DataAuditAggregate.DataAudit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("DataChanges")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("DateTime");

                    b.HasIndex("User", "Action");

                    b.HasIndex("Database", "Schema", "Table");

                    b.ToTable("DataAudit", (string)null);
                });

            modelBuilder.Entity("Juice.Audit.Domain.AccessLogAggregate.AccessLog", b =>
                {
                    b.OwnsOne("Juice.Audit.Domain.AccessLogAggregate.RequestInfo", "RequestInfo", b1 =>
                        {
                            b1.Property<Guid>("AccessLogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AccessZone")
                                .HasColumnType("text");

                            b1.Property<string>("Data")
                                .HasColumnType("text");

                            b1.Property<string>("Headers")
                                .HasColumnType("text");

                            b1.Property<string>("Host")
                                .HasColumnType("text");

                            b1.Property<string>("Method")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("QueryString")
                                .HasColumnType("text");

                            b1.Property<string>("RemoteIpAddress")
                                .HasColumnType("text");

                            b1.Property<string>("RequestId")
                                .HasColumnType("text");

                            b1.Property<string>("Schema")
                                .HasColumnType("text");

                            b1.HasKey("AccessLogId");

                            b1.ToTable("AccessLog");

                            b1.WithOwner()
                                .HasForeignKey("AccessLogId");
                        });

                    b.OwnsOne("Juice.Audit.Domain.AccessLogAggregate.ResponseInfo", "ResponseInfo", b1 =>
                        {
                            b1.Property<Guid>("AccessLogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Data")
                                .HasColumnType("text");

                            b1.Property<string>("Error")
                                .HasColumnType("text");

                            b1.Property<string>("Headers")
                                .HasColumnType("text");

                            b1.Property<string>("Message")
                                .HasColumnType("text");

                            b1.Property<int>("StatusCode")
                                .HasColumnType("integer");

                            b1.HasKey("AccessLogId");

                            b1.ToTable("AccessLog");

                            b1.WithOwner()
                                .HasForeignKey("AccessLogId");
                        });

                    b.OwnsOne("Juice.Audit.Domain.AccessLogAggregate.ServerInfo", "ServerInfo", b1 =>
                        {
                            b1.Property<Guid>("AccessLogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("AppName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MachineName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("OSVersion")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SoftwareVersion")
                                .HasColumnType("text");

                            b1.HasKey("AccessLogId");

                            b1.ToTable("AccessLog");

                            b1.WithOwner()
                                .HasForeignKey("AccessLogId");
                        });

                    b.Navigation("RequestInfo");

                    b.Navigation("ResponseInfo");

                    b.Navigation("ServerInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
